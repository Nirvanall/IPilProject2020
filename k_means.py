# -*- coding: utf-8 -*-
"""
Author: Jochem Mullink
title: segmentation based on k-means clustering
"""

import numpy as np
from math import floor
from sklearn.cluster import KMeans
import time

def KMeansImage(A, n_clusters = 2, n_restarts=3, max_iter=10):
    '''
    Algorithm that performs k-means on an n-D-image.
    
    Inputs: 
        np.array A; an n-dimensional image.
        int n_clusters; the image is partitioned in n_clusters clusters.
        int n_restarts; the number of restarts of the algorithm, 
            the algorithm outputs the best segmentation.
        int max_iter; the maximum number of iterations of the algorithm.
    
    Outputs: 
        np.array cluster_centers; The centers of the clusters generated by k-means
        np.array labels; The cluster label associated to each element in an image
    
    Time complexity:
        Let N = size(A)
        The time complexity is O(N) where the implicit constant depends on
        n_clusters, n_restarts and max_iter.
    '''
    size = A.shape
    kmeans = KMeans(n_clusters=K,
                n_init=n_restarts,
                max_iter=max_iter
                )
    kmeans.fit(X=A.reshape(-1,1))
    cluster_centers = kmeans.cluster_centers_
    labels = kmeans.labels_
    labels = labels.reshape(size)
    return cluster_centers, labels





if __name__ == '__main__':
    #Size the picture
    k,l,m = 50,50,5

    #Generate a test array A.
    A = np.zeros((k,l,m))
    A[floor(k/3):floor(k/2),floor(l/3):floor(l/2),floor(m/3):floor(m/2)] = 1


    K=2 #Number of clusters
    cluster_centers, labels = KMeansImage(A)



